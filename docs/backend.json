{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user's profile in the Sanjog application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserProfile entity."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "name": {
          "type": "string",
          "description": "User's full name."
        },
        "avatarUrl": {
          "type": "string",
          "description": "URL of the user's avatar image.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "email",
        "name"
      ]
    },
    "Lesson": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Lesson",
      "type": "object",
      "description": "Represents a sign language lesson.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Lesson entity."
        },
        "title": {
          "type": "string",
          "description": "Title of the lesson."
        },
        "description": {
          "type": "string",
          "description": "Description of the lesson content."
        },
        "category": {
          "type": "string",
          "description": "Category of the lesson (e.g., Alphabets, Numbers)."
        },
        "contentUrl": {
          "type": "string",
          "description": "URL to the lesson content (e.g., video, interactive exercise).",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "contentUrl"
      ]
    },
    "UserProgress": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProgress",
      "type": "object",
      "description": "Represents a user's progress in a specific lesson.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserProgress entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N UserProgress)"
        },
        "lessonId": {
          "type": "string",
          "description": "Reference to Lesson. (Relationship: Lesson 1:N UserProgress)"
        },
        "completionDate": {
          "type": "string",
          "description": "Date when the lesson was completed.",
          "format": "date-time"
        },
        "score": {
          "type": "number",
          "description": "User's score on the lesson (e.g., percentage correct)."
        }
      },
      "required": [
        "id",
        "userId",
        "lessonId",
        "completionDate",
        "score"
      ]
    },
    "Achievement": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Achievement",
      "type": "object",
      "description": "Represents an achievement or badge that a user can earn.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Achievement entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the achievement (e.g., Confident Reader)."
        },
        "description": {
          "type": "string",
          "description": "Description of how to earn the achievement."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the achievement badge image.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "imageUrl"
      ]
    },
    "UserAchievement": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserAchievement",
      "type": "object",
      "description": "Represents a user's earned achievements.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserAchievement entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N UserAchievement)"
        },
        "achievementId": {
          "type": "string",
          "description": "Reference to Achievement. (Relationship: Achievement 1:N UserAchievement)"
        },
        "dateEarned": {
          "type": "string",
          "description": "Date when the achievement was earned.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "achievementId",
        "dateEarned"
      ]
    },
    "LeaderboardEntry": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LeaderboardEntry",
      "type": "object",
      "description": "Represents a user's entry on the community leaderboard.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the LeaderboardEntry entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N LeaderboardEntry)"
        },
        "points": {
          "type": "number",
          "description": "User's total points on the leaderboard."
        },
        "level": {
          "type": "string",
          "description": "User's current level on the leaderboard."
        },
        "rank": {
          "type": "number",
          "description": "User's rank on the leaderboard."
        }
      },
      "required": [
        "id",
        "userId",
        "points",
        "level",
        "rank"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. Path-based ownership ensures only the user can access their profile.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/lessons/{lessonId}",
        "definition": {
          "entityName": "Lesson",
          "schema": {
            "$ref": "#/backend/entities/Lesson"
          },
          "description": "Stores lesson data. Publicly readable.",
          "params": [
            {
              "name": "lessonId",
              "description": "The unique identifier of the lesson."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/progress/{progressId}",
        "definition": {
          "entityName": "UserProgress",
          "schema": {
            "$ref": "#/backend/entities/UserProgress"
          },
          "description": "Stores user progress for each lesson. Path-based ownership ensures only the user can access their progress data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "progressId",
              "description": "The unique identifier of the progress entry."
            }
          ]
        }
      },
      {
        "path": "/achievements/{achievementId}",
        "definition": {
          "entityName": "Achievement",
          "schema": {
            "$ref": "#/backend/entities/Achievement"
          },
          "description": "Stores achievement definitions. Publicly readable.",
          "params": [
            {
              "name": "achievementId",
              "description": "The unique identifier of the achievement."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/achievements/{userAchievementId}",
        "definition": {
          "entityName": "UserAchievement",
          "schema": {
            "$ref": "#/backend/entities/UserAchievement"
          },
          "description": "Stores user's earned achievements. Path-based ownership ensures only the user can access their achievement data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "userAchievementId",
              "description": "The unique identifier of the user achievement entry."
            }
          ]
        }
      },
      {
        "path": "/leaderboard/{leaderboardEntryId}",
        "definition": {
          "entityName": "LeaderboardEntry",
          "schema": {
            "$ref": "#/backend/entities/LeaderboardEntry"
          },
          "description": "Stores leaderboard entries. The owner id is denormalized to enable listing and single reads.",
          "params": [
            {
              "name": "leaderboardEntryId",
              "description": "The unique identifier of the leaderboard entry."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to optimize for security, scalability, and query performance, adhering to the principles of Authorization Independence, Structural Segregation, and Access Modeling.  The error message `Firebase: Error (auth/operation-not-allowed)` indicates the Firebase Authentication method might not be enabled. However, this config is external to the Firestore structure, the structure must still support easy debuggability if access is correctly enabled and access is still failing.\n\n1.  **Authorization Independence:**\n\n    *   UserProgress: Access is controlled by the user's ID.  There is no dependence on any parent document to establish authorization.\n    *   UserAchievement:  Similar to UserProgress, access is managed through the user's ID within a path, eliminating the need for authorization `get()` calls.\n    *   LeaderboardEntry: Access is controlled by user ID.\n\n2.  **Structural Segregation:**\n\n    *   UserProfile: Stored in a dedicated collection, providing a clear separation of user-specific data. This separation simplifies the definition and enforcement of security rules.\n    *   Lessons: Lessons are stored globally, available to all users. This segregation allows for a straightforward access control configuration.\n    *   UserProgress, UserAchievement, and LeaderboardEntry are all stored in user-specific subcollections, further isolating user-related data.\n\n3.  **Access Modeling:**\n\n    *   Private Data: UserProfile, UserProgress, UserAchievement, and LeaderboardEntry are secured using path-based ownership (`/users/{userId}/...`). This pattern ensures that only the authenticated user can access their respective data.\n\n4.  **QAPs Support:**\n\n    *   List Operations:  The structure supports secure `list` operations. The user-specific subcollections enable listing only the data associated with a particular user without exposing data from other users.\n\nThis structure avoids hierarchical authorization dependencies, enabling atomic operations and simplifying security rule design. It clearly defines access patterns and promotes easy debuggability. The separation of data into distinct collections based on access requirements enhances security and enables efficient query execution."
  }
}