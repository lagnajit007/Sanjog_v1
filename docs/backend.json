{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user's profile within the Sanjog application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserProfile entity."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "name": {
          "type": "string",
          "description": "User's full name."
        },
        "avatar": {
          "type": "string",
          "description": "URL of the user's avatar image.",
          "format": "uri"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the user profile was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp of when the user profile was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "email",
        "name"
      ]
    },
    "Lesson": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Lesson",
      "type": "object",
      "description": "Represents a sign language lesson.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Lesson entity."
        },
        "title": {
          "type": "string",
          "description": "Title of the lesson."
        },
        "description": {
          "type": "string",
          "description": "Description of the lesson content."
        },
        "contentUrl": {
          "type": "string",
          "description": "URL of the lesson content (video, document, etc.).",
          "format": "uri"
        },
        "category": {
          "type": "string",
          "description": "Category of the lesson (e.g., Alphabets, Numbers)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the lesson was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp of when the lesson was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "title",
        "contentUrl"
      ]
    },
    "UserLessonProgress": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserLessonProgress",
      "type": "object",
      "description": "Represents a user's progress on a specific lesson.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserLessonProgress entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N UserLessonProgress)"
        },
        "lessonId": {
          "type": "string",
          "description": "Reference to Lesson. (Relationship: Lesson 1:N UserLessonProgress)"
        },
        "progress": {
          "type": "number",
          "description": "Percentage of the lesson completed (0-100)."
        },
        "isCompleted": {
          "type": "boolean",
          "description": "Indicates if the lesson is completed."
        },
        "lastAccessed": {
          "type": "string",
          "description": "Timestamp of when the lesson was last accessed by the user.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "lessonId"
      ]
    },
    "Achievement": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Achievement",
      "type": "object",
      "description": "Represents an achievement or badge that a user can earn.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Achievement entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the achievement."
        },
        "description": {
          "type": "string",
          "description": "Description of the achievement and how to earn it."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the achievement badge image.",
          "format": "uri"
        },
        "points": {
          "type": "number",
          "description": "Points awarded for earning the achievement."
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "imageUrl"
      ]
    },
    "UserAchievement": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserAchievement",
      "type": "object",
      "description": "Represents a user's earned achievement.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserAchievement entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N UserAchievement)"
        },
        "achievementId": {
          "type": "string",
          "description": "Reference to Achievement. (Relationship: Achievement 1:N UserAchievement)"
        },
        "earnedAt": {
          "type": "string",
          "description": "Timestamp of when the achievement was earned.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "achievementId"
      ]
    },
    "LeaderboardEntry": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LeaderboardEntry",
      "type": "object",
      "description": "Represents a single entry in the community leaderboard.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the LeaderboardEntry entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N LeaderboardEntry)"
        },
        "points": {
          "type": "number",
          "description": "Total points earned by the user."
        },
        "level": {
          "type": "number",
          "description": "The current skill level of the user."
        },
        "rank": {
          "type": "number",
          "description": "The current rank of the user."
        }
      },
      "required": [
        "id",
        "userId",
        "points",
        "level"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. Path-based ownership enables simple security rules. Includes denormalized data as needed.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/lessons/{lessonId}",
        "definition": {
          "entityName": "Lesson",
          "schema": {
            "$ref": "#/backend/entities/Lesson"
          },
          "description": "Stores lesson information. Lessons share the same security posture.",
          "params": [
            {
              "name": "lessonId",
              "description": "The unique identifier for the lesson."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/lessons/{lessonId}/progress",
        "definition": {
          "entityName": "UserLessonProgress",
          "schema": {
            "$ref": "#/backend/entities/UserLessonProgress"
          },
          "description": "Stores user's progress for a specific lesson. Nested under the user to ensure path-based ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "lessonId",
              "description": "The unique identifier for the lesson."
            }
          ]
        }
      },
      {
        "path": "/achievements/{achievementId}",
        "definition": {
          "entityName": "Achievement",
          "schema": {
            "$ref": "#/backend/entities/Achievement"
          },
          "description": "Stores achievement information. Achievements share the same security posture.",
          "params": [
            {
              "name": "achievementId",
              "description": "The unique identifier for the achievement."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/achievements/{achievementId}",
        "definition": {
          "entityName": "UserAchievement",
          "schema": {
            "$ref": "#/backend/entities/UserAchievement"
          },
          "description": "Stores user's earned achievements. Nested under the user to ensure path-based ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "achievementId",
              "description": "The unique identifier for the achievement."
            }
          ]
        }
      },
      {
        "path": "/leaderboard/{leaderboardEntryId}",
        "definition": {
          "entityName": "LeaderboardEntry",
          "schema": {
            "$ref": "#/backend/entities/LeaderboardEntry"
          },
          "description": "Stores leaderboard entries for ranking users.",
          "params": [
            {
              "name": "leaderboardEntryId",
              "description": "The unique identifier for the leaderboard entry."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to be secure, scalable, and debuggable, adhering to the principles of Authorization Independence, Clarity of Intent, DBAC (Database Based Access Control), and QAPs (Rules are not Filters). It leverages denormalization to avoid hierarchical authorization dependencies and structural segregation to simplify security rules.\n\n1.  **UserProfile**: User profiles are stored under `/users/{userId}`. This path-based ownership provides clear authorization and simplifies rules for accessing user-specific data.\n2.  **Lessons**: Lessons are stored in the `/lessons` collection. All lessons share the same security posture, enabling simple list operations and management.\n3.  **UserLessonProgress**: User lesson progress is stored under `/users/{userId}/lessons/{lessonId}/progress`.  This nested path reflects the `User 1:N Lesson` relationship. This structure enables simple, secure access to a user's progress on specific lessons.\n4.  **Achievements**: Achievements are stored in the `/achievements` collection.  Like lessons, all achievements share the same security requirements.\n5.  **UserAchievement**: User achievements are stored under `/users/{userId}/achievements/{achievementId}`. This nested structure mirrors the `User 1:N Achievement` relationship.\n6.  **LeaderboardEntry**: Leaderboard entries are stored in the `/leaderboard` collection. Each entry contains user-specific data for ranking.  The `userId` field enables filtering and display of user-specific leaderboard information.\n\nThis structure achieves Authorization Independence by avoiding `get()` calls in security rules. Path-based ownership (`/users/{userId}/...`) clearly defines access rights based on the authenticated user. Structural segregation ensures that each collection has a homogeneous security posture, simplifying rule creation and maintenance. The membership map pattern is not directly used in this design as there isn't an explicit collaborative data model defined in the requirements."
  }
}