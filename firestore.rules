/**
 * @file Firestore Security Rules for Sanjog Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user-specific data
 * and allows public read access to shared content like lessons and achievements.
 *
 * @data_structure
 * - /users/{userId}: Stores individual user profiles.
 * - /lessons/{lessonId}: Stores lesson content, accessible to all users.
 * - /users/{userId}/progress/{progressId}: Stores user-specific lesson progress.
 * - /achievements/{achievementId}: Stores achievement definitions, accessible to all users.
 * - /users/{userId}/achievements/{userAchievementId}: Stores user-specific achievement data.
 * - /leaderboard/{leaderboardEntryId}: Stores leaderboard entries.
 *
 * @key_security_decisions
 * - Users can only access their own profile data and associated subcollections.
 * - Lessons and achievements are publicly readable but not writable by users.
 * - Leaderboard entries do not enforce the user ID to match the document path.
 *
 * @denormalization_for_authorization
 * - No denormalization is used. The current path-based ownership model is efficient enough.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read, update, or delete their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching userId in the request data.
     * @allow (get, update, delete) - Authenticated user matching the userId.
     * @deny (create, update, delete) - Any other user attempting to access this profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to lesson data. Write access is not permitted.
     * @path /lessons/{lessonId}
     * @allow (get, list) - Any user (authenticated or not).
     * @deny (create, update, delete) - Any user attempting to write to this collection.
     * @principle Allows public read access for shared content.
     */
    match /lessons/{lessonId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure user progress data. Only the authenticated user can read, create, update, or delete their own progress data.
     * @path /users/{userId}/progress/{progressId}
     * @allow (create) - Authenticated user with matching userId.
     * @allow (get, update, delete) - Authenticated user matching the userId.
     * @deny (create, update, delete) - Any other user attempting to access this data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/progress/{progressId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to achievement definitions. Write access is not permitted.
     * @path /achievements/{achievementId}
     * @allow (get, list) - Any user (authenticated or not).
     * @deny (create, update, delete) - Any user attempting to write to this collection.
     * @principle Allows public read access for shared content.
     */
    match /achievements/{achievementId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure user achievement data. Only the authenticated user can read, create, update, or delete their own achievement data.
     * @path /users/{userId}/achievements/{userAchievementId}
     * @allow (create) - Authenticated user with matching userId.
     * @allow (get, update, delete) - Authenticated user matching the userId.
     * @deny (create, update, delete) - Any other user attempting to access this data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/achievements/{userAchievementId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure leaderboard entries.
     * @path /leaderboard/{leaderboardEntryId}
     */
    match /leaderboard/{leaderboardEntryId} {
        allow get: if true;
        allow list: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null && resource != null;
        allow delete: if request.auth != null && resource != null;
    }
  }
}